# SSL: Channel regularization
#
# time python3 compress_classifier.py --arch resnet18_v2  /scratch/datasets/IMAGENET/ -p=50 --lr=0.3 --epochs=180 --compress=/home/mha/checkouts/NNO_DISTILLER/kiss_yaml/resnet18_v2_ssl_channels-removal_training.yaml -j=1 --deterministic -o /home/mha/checkouts/NNO_DISTILLER/kiss_logs
#
# To fine-tune:
# time python3 compress_classifier.py --arch resnet20_cifar  ../../../data.cifar10 -p=50 --lr=0.2 --epochs=98 --compress=../ssl/ssl_channels-removal_finetuning.yaml -j=1 --deterministic --resume=...


lr_schedulers:
  training_lr:
    class: StepLR
    step_size: 45
    gamma: 0.10

pruners:
  example_pruner:
    class: L1RankedStructureParameterPruner_AGP
    initial_sparsity : 0.10
    final_sparsity: 0.50
    group_type: Channels
    group_dependency: Leader
    weights: [
      module.layer1.1.conv1.weight,
      module.layer1.0.conv1.weight,
      module.layer1.2.conv1.weight,
      module.layer1.3.conv1.weight,
      module.layer1.4.conv1.weight,
      module.layer1.5.conv1.weight,
      module.layer1.6.conv1.weight,
      module.layer1.7.conv1.weight,
      module.layer1.8.conv1.weight,
      module.layer2.0.conv1.weight,
      module.layer2.0.downsample.0.weight
      ]
    #group_dependency: Leader
#     weights: [
# module.layer1.0.conv1.weight, 
# module.layer1.0.conv2.weight, 
# module.layer1.1.conv1.weight, 
# module.layer1.1.conv2.weight, 
# module.layer2.0.conv1.weight, 
# module.layer2.0.conv2.weight, 
# module.layer2.0.downsample.0.weight, 
# module.layer2.1.conv1.weight, 
# module.layer2.1.conv2.weight, 
# module.layer3.0.conv1.weight, 
# module.layer3.0.conv2.weight, 
# module.layer3.0.downsample.0.weight,
# module.layer3.1.conv1.weight, 
# module.layer3.1.conv2.weight, 
# module.layer4.0.conv1.weight, 
# module.layer4.0.conv2.weight, 
# module.layer4.0.downsample.0.weight,
# module.layer4.1.conv1.weight, 
# module.layer4.1.conv2.weight, 
# module.fc.weight, 
# ]

extensions:
  net_thinner:
      class: 'ChannelRemover'
      thinning_func_str: remove_channels
      arch: 'resnet18_v2'
      dataset: 'cifar10'

policies:  
  - lr_scheduler:
      instance_name: training_lr
    starting_epoch: 10
    ending_epoch: 180
    frequency: 1

# After completeing the regularization, we perform network thinning and exit.
  - extension:
      instance_name: net_thinner
    epochs: [30]

  - pruner:
      instance_name: example_pruner
    starting_epoch: 0
    ending_epoch: 180
    frequency: 1
